// Задание 1
// • Используя Symbol.iterator, создайте объект "Музыкальная коллекция", который можно итерировать. Каждая итерация должна возвращать следующий альбом из коллекции.

// • Создайте объект musicCollection, который содержит массив альбомов и имеет свойство-символ Symbol.iterator. Каждый альбом имеет следующую структуру:

// {
// title: "Название альбома",
// artist: "Исполнитель",
// year: "Год выпуска"
// }

// • Реализуйте кастомный итератор для объекта musicCollection. Итератор должен перебирать альбомы по порядку.
// • Используйте цикл for...of для перебора альбомов в музыкальной коллекции и вывода их на консоль в формате: Название альбома - Исполнитель (Год выпуска)

const musicCollection = [
	{
		title: "Best hits",
		artist: "Mettalica",
		year: "2000"
	},
	{
		title: "Nevermind",
		artist: "Nirvana",
		year: "1991"
	},
]

const library = {
	albums: [...musicCollection],
	[Symbol.iterator] : function() {
		let index = 0;
		return { 
			next: () => {
				if (index < this.albums.length){
					return {value: this.albums[index++], done: false};
				} else {
					return {done: true};
				}
			}
		}
	}
}

for (const album of library) {
	console.log(album.title, album.artist, album.year);
}

// Задание 2
// Вы управляете рестораном, в котором работают разные повара, специализирующиеся на определенных блюдах. Клиенты приходят и делают заказы на разные блюда.

// Необходимо создать систему управления этими заказами, которая позволит:

// • Отслеживать, какой повар готовит какое блюдо.
// • Записывать, какие блюда заказал каждый клиент.

// Используйте коллекции Map для хранения блюд и их поваров, а также для хранения заказов каждого клиента. В качестве ключей для клиентов используйте объекты.

// Повара и их специализации:

// Виктор - специализация: Пицца.
// Ольга - специализация: Суши.
// Дмитрий - специализация: Десерты.

// Блюда и их повара:

// Пицца "Маргарита" - повар: Виктор.
// Пицца "Пепперони" - повар: Виктор.
// Суши "Филадельфия" - повар: Ольга.
// Суши "Калифорния" - повар: Ольга.
// Тирамису - повар: Дмитрий.
// Чизкейк - повар: Дмитрий.

// Заказы:

// Клиент Алексей заказал: Пиццу "Пепперони" и Тирамису.
// Клиент Мария заказала: Суши "Калифорния" и Пиццу "Маргарита".
// Клиент Ирина заказала: Чизкейк.

const chefs = new Map([
	['Виктор', 'Пицца'],
	['Ольга', 'Суши'],
	['Дмитрий', 'Десерты']
  ]);
  
  const dishes = new Map([
	['Пицца "Маргарита"', 'Виктор'],
	['Пицца "Пепперони"', 'Виктор'],
	['Суши "Филадельфия"', 'Ольга'],
	['Суши "Калифорния"', 'Ольга'],
	['Тирамису', 'Дмитрий'],
	['Чизкейк', 'Дмитрий']
  ]);
  
  const orders = new Map();
  
  function addOrder(client, dish) {
	if (orders.has(client)) {
	  orders.get(client).push(dish);
	} else {
	  orders.set(client, [dish]);
	}
  }
  
  addOrder('Алексей', 'Пицца "Пепперони"');
  addOrder('Алексей', 'Тирамису');
  addOrder('Мария', 'Суши "Калифорния"');
  addOrder('Мария', 'Пицца "Маргарита"');
  addOrder('Ирина', 'Чизкейк');
  
// Выводим информацию о заказах
orders.forEach((dishes, client) => {
	console.log(`Клиент ${client} заказал: ${dishes.join('и ')}`);
});
  
  // Выводим информацию о поварах и их специализациях
chefs.forEach((specialization, chef) => {
	console.log(`Повар ${chef} специализируется на: ${specialization}`);
});
  
  // Выводим информацию о блюдах и их поварах
dishes.forEach((chef, dish) => {
	console.log(`Блюдо ${dish} готовит повар ${chef}`);
});
  
  

